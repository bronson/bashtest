#!/bin/bash

test:run_passing_test() {
    # TODO: these lines should be moved into a test environment tester
    if [ -z "$tsk_framework_file" ]; then
        abort "Framework path not specified"
    fi
    if [ ! -f "$tsk_framework_file" ]; then
        abort "Framework not found at '$tsk_framework_file'"
    fi

    echo "test:run_test() { is_eq 1 1; }" > temp_test.test
    bash $tsk_framework_file temp_test.test
    stdout_is <<EOL
 01 pass   test:run_test
1 test: 1 passed, 0 failed.   1 assertion.
EOL
}

test:run_failing_test() {
    echo "test:run_test() { is_eq 1 2; }" > temp_failing.test
    bash $tsk_framework_file temp_failing.test
    stdout_is <<EOL
 01 FAIL   test:run_test (1 error)
  - line 1: is_eq expected '1', got '2'
1 test: 0 passed, 1 failed.   1 assertion.
EOL
}

# Make sure tests can run in the order specified in the testfile.
# If you order your file so the foundational concepts are tested first,
# and complex stuff later, the first failures should be more understandable.
# This is NOT so tests can depend on each other!
# TODO: I think we just need to settle for tests running in alphabetical order.
test:run_tests_in_order() {
    cat > temp_order.test <<EOL
test:one() { is_eq 1 1; }
test:two() { is_eq 2 2; }
test:three() { is_eq 3 3; }
test:four() { is_eq 4 4; }
source "$tsk_framework_file"
EOL
    bash $tsk_framework_file temp_order.test
    stdout_is <<EOL
 01 pass   test:four
 02 pass   test:one
 03 pass   test:three
 04 pass   test:two
4 tests: 4 passed, 0 failed.   4 assertions.
EOL
}

source "$(dirname "$BASH_SOURCE")/run-tests"
