#!/bin/bash

# Tests all the ways to skip tests.
#
# TODO: before_all should be able to skip the entire testfile

before:all() {
    # this is a little more readable
    run_tests="$tsk_framework_file"
}

create_skip_test() {
    cat > skip.test <<EOF
        # this test is executed, not skipped
        test:nop() {
            is_eq 1 1
    	}

        # the test is skipped because of the function name
    	skip:skipped() {
    	    is_eq 1 2
    	}

        # a test is considered skipped if it doesn't do any assertions
    	test:no_asserts() {
    	    true
    	}

        # TODO: skip because of a keyword or something in the middle of a test?
        # test:skip_keyword() { skip; }
EOF
}

# verify the actual output from the command, don't use the test formatter
test:skip_functions() {
    create_skip_test
    $run_tests skip.test | sort
    stdout_is <<EOF
 01 skip   test:no_asserts
 02 pass   test:nop
 03 skip   skip:skipped
3 tests: 1 passed, 0 failed, 2 skipped.   1 assertion.
EOF
}

# test the dot formatter instead of the list formatter above
test:skip_functions_multithread() {
    cat > skip.test <<EOF
        skip:nop() {
            is_eq 1 1
    	}
EOF
    $run_tests skip.test skip.test
    stdout_is <<EOF
ss
Skipped tests:
  â—‹ skip.test: 1 test skipped
  â—‹ skip.test: 1 test skipped
EOF
}

# ensure we skip all tests in a file named *.skip
test:skip_file() {
    create_skip_test
    mv skip.test test.skip
    $run_tests -f test | sort
    stdout_is <<EOF
skip skip:skipped
skip test:no_asserts
skip test:nop
EOF
}

# ensure we skip files even if they're named on the command line
test:skip_named_file() {
    create_skip_test
    mv skip.test miss-me.skip
    $run_tests miss-me.skip -f test | sort
    stdout_is <<EOF
skip skip:skipped
skip test:no_asserts
skip test:nop
EOF
}

test:skip_in_before_all() {
    cat > skip.test <<EOF
        # the before hook causes this test to be skipped
        test:nop() {
            is_eq 1 1
    	}

        before:all() {
            skip
        }

        after:all() {
            echo "the after:all hook needed to be skipped." >&2
            exit 1
        }
EOF

    $run_tests skip.test -f test | sort
    stdout_is <<EOF
skip test:nop
EOF
}

test:skip_in_before_each() {
    cat > skip.test <<EOF
        # the before hook causes this test to be skipped
        test:nop() {
            is_eq 1 1
    	}

        before:each() {
             skip
        }
EOF

    $run_tests skip.test -f test | sort
    stdout_is <<EOF
skip test:nop
EOF
}

test:skip_in_test() {
    cat > skip.test <<EOF
        test:not_happening() {
            skip; return
            is_eq 1 1
    	}
EOF

    $run_tests skip.test -f test | sort
    stdout_is <<EOF
skip test:not_happening
EOF
}

source "$(dirname "$BASH_SOURCE")/run-tests"
