#!/bin/bash

# Tests all the ways to skip tests.
#
# TODO: before_all should be able to skip the entire testfile

before:all() {
    # this is a little more readable
    run_tests="$tsk_framework_file"
}


# Make sure the config file gets loaded.
# The test copies run-tests

test:config_file() {
    cp "$tsk_framework_file" ./run-tests
    chmod +x ./run-tests
    # if the test formatter is used, our config took effect
    echo "tsk_test_formatter=test" > test-config.sh
    echo "test:sample() { is_eq 1 1; }" > sample.test

    ./run-tests
    # make sure the result used the test formatter
    stdout_is <<EOF
pass test:sample
EOF

    rm run-tests test-config.sh sample.test
}

# Make sure the config file can abort the test
test:config_file_abort() {
    cp "$tsk_framework_file" ./run-tests
    chmod +x ./run-tests
    echo "tsk_test_formatter=test" > test-config.sh
    echo "test:sample() { abort 'this worked'; }" > sample.test

    ./run-tests
    is_eq 127 $?
    stdout_is <<EOF
 01 ABORT  test:sample line 1: this worked
TEST ABORTED
EOF

    rm run-tests test-config.sh sample.test
}

# verify that definitions in the config file are available to all tests
test:config_file_definitions() {
    # to get the test runner to automatically use the config file in
    # this directory, we'll just copy it to this directory.
    cp "$tsk_framework_file" ./run-tests
    chmod +x ./run-tests

    # create a config file that defines a function and sets a variable
    echo "my_var=is_set" > test-config.sh
    echo "my_func() { echo 'runs'; }" >> test-config.sh

    # create a testfile that ensures they're still set
    echo "test:sample() {" > sample.test
    echo '    is_eq is_set $my_var' >> sample.test
    echo '    is_eq runs $(my_func)' >> sample.test
    echo "}" >> sample.test

    ./run-tests -f test
    stdout_is <<EOF
pass test:sample
EOF
    rm run-tests test-config.sh sample.test
}

# verify that exclude_directory in config file works
test:config_file_exclude_directory() {
    cp "$tsk_framework_file" ./run-tests
    chmod +x ./run-tests

    # create some directories to exclude
    mkdir -p fixtures
    echo 'test:fixture() { is_eq 1 1; }' > fixtures/fixture.test
    mkdir -p src
    echo 'test:real() { is_eq 1 1; }' > src/real.test

    # config file excludes the fixtures directory
    echo "exclude_directory fixtures" > test-config.sh

    # run tests - should only find src/real.test
    ./run-tests -f test .
    stdout_is <<EOL
pass test:real
EOL

    rm -rf run-tests test-config.sh fixtures src
}

source "$(dirname "$BASH_SOURCE")/run-tests"
