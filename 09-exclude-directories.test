#!/bin/bash

# Test excluding directories functionality


before:all() {
    run_tests="$tsk_framework_file"
}

# These test excluding using the command line.
# Excluding via config file is tested in `config-file.test`.

create_exclude_fixtures() {
    mkdir -p testdir/fixtures
    echo 'test:fixture() { is_eq 1 1; }' > testdir/fixtures/fixture.test
    mkdir -p testdir/src
    echo 'test:real() { is_eq 1 1; }' > testdir/src/real.test
}

test:exclude_via_command_line() {
    create_exclude_fixtures
    echo 'First run without excluding, should find both files:'
    $run_tests -f test testdir | sort
    echo
    echo 'Then run with excluding, should find only real.test:'
    $run_tests -f test --exclude fixtures testdir

    stdout_is <<EOF
First run without excluding, should find both files:
pass test:fixture
pass test:real

Then run with excluding, should find only real.test:
pass test:real
EOF
    rm -rf testdir
}

test:exclude_multiple_directories() {
    create_exclude_fixtures

    mkdir -p testdir/vendor
    echo 'test:from_vendor() { is_eq 1 1; }' > testdir/vendor/vendor.test

    echo "with vendor:"
    $run_tests -f test --exclude fixtures testdir | sort
    echo "without vendor:"
    $run_tests -f test --exclude fixtures --exclude vendor testdir | sort
    stdout_is <<EOF
with vendor:
pass test:from_vendor
pass test:real
without vendor:
pass test:real
EOF
    rm -rf testdir
}

test:exclude_with_equals_syntax() {
    create_exclude_fixtures
    $run_tests -f test --exclude=fixtures testdir | sort
    stdout_is <<EOF
pass test:real
EOF
    rm -rf testdir
}

# Test that pruning works for nested directories
skip:exclude_nested_directories() {
    create_exclude_fixtures

    mkdir -p testdir/src/binaries
    echo 'test:from_binaries() { is_eq 1 1; }' > testdir/src/binaries/binaries.test

    echo FIRST '(all tests pruned)'
    $run_tests testdir -f test --exclude testdir
    echo SECOND
    $run_tests testdir -f test --exclude binaries
    stdout_is <<EOF
FIRST (all tests pruned)
SECOND
pass test:real
pass test:fixture
EOF
    rm -rf testdir
}

# Test -e short option
test:exclude_with_short_option() {
    create_exclude_fixtures
    $run_tests -f test testdir -e fixtures
    stdout_is <<EOF
pass test:real
EOF
    rm -rf testdir
}

# test what happens if the user excludes a dir and also names that dir on the command line
test:exclude_and_include_simultaneously() {
    mkdir -p fixtures
    echo 'test:fixture() { is_eq 1 1; }' > fixtures/fixture.test

    $run_tests fixtures -f test -e fixtures
    stdout_is <<EOF
pass test:fixture
EOF
    rm -rf testdir
}

skip:reject_bad_directory_names() {
    # Test that directory names with glob characters are rejected

    # Test with asterisk
    output=$("$(framework_dir)/run-tests" --exclude "test*" . 2>&1)
    echo "$output" | grep -q "Error: Cannot exclude directory 'test\*'" || abort "Should reject directory name with asterisk"
    echo "$output" | grep -q "contains special characters" || abort "Should show error message about special characters"

    # Test with question mark
    output=$("$(framework_dir)/run-tests" --exclude "test?" . 2>&1)
    echo "$output" | grep -q "Error: Cannot exclude directory 'test?'" || abort "Should reject directory name with question mark"

    # Test with brackets
    output=$("$(framework_dir)/run-tests" --exclude "test[abc]" . 2>&1)
    echo "$output" | grep -q "Error: Cannot exclude directory 'test\[abc\]'" || abort "Should reject directory name with brackets"

    # Test with backslash
    output=$("$(framework_dir)/run-tests" --exclude "test\\dir" . 2>&1)
    echo "$output" | grep -q "Error: Cannot exclude directory 'test\\\\dir'" || abort "Should reject directory name with backslash"

    # Test with equals syntax
    output=$("$(framework_dir)/run-tests" --exclude="bad*name" . 2>&1)
    echo "$output" | grep -q "Error: Cannot exclude directory 'bad\*name'" || abort "Should reject bad name with equals syntax"

    # Test with short option
    output=$("$(framework_dir)/run-tests" -e "bad?" . 2>&1)
    echo "$output" | grep -q "Error: Cannot exclude directory 'bad?'" || abort "Should reject bad name with short option"
}

source "$(dirname "$BASH_SOURCE")/run-tests"
